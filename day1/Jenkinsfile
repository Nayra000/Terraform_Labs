pipeline {
    agent any

    environment {
        AWS_CREDS = credentials('aws-credentials')  // Must be username/password type
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs() 
            }
        }
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/Nayra000/Terraform_Labs.git', branch: 'main'
            }
        }

        stage('Initialize Terraform') {
            steps {
                terraformInit(directory: 'day1')
            }
        }

        stage('Plan Infrastructure') {
            steps {
                terraformPlan(directory: 'day1', planFile: 'tfplan')
            }
        }

        stage('Apply Changes') {
            steps {
                withEnv([
                    "AWS_ACCESS_KEY_ID=${env.AWS_CREDS_USR}",
                    "AWS_SECRET_ACCESS_KEY=${env.AWS_CREDS_PSW}"
                ]) {
                    terraformApply(directory: 'day1', planFile: 'tfplan')
                }
            }
        }

        stage('Destroy Changes') {
            steps {
                withEnv([
                    "AWS_ACCESS_KEY_ID=${env.AWS_CREDS_USR}",
                    "AWS_SECRET_ACCESS_KEY=${env.AWS_CREDS_PSW}"
                ]) {
                    terraformDestroy(directory: 'day1', forceDestroy: true)
                }
            }
        }
    }

    post {
        success {
            slackSend channel: 'iti', message: "✅ Terraform Apply Succeeded! Job: ${env.JOB_NAME}, Build: ${env.BUILD_NUMBER}"
        }
        failure {
            slackSend channel: 'iti', message: "❌ Terraform Apply Failed! Job: ${env.JOB_NAME}, Build: ${env.BUILD_NUMBER}"
        }
    }
}
